Hi its Day14 and Here's what I've learned : 

Internal implementation of method overriding that helps in achieving the dynamic polymorphism : 

 So we may know that method overriding basically means that whenever a parent or the base class have a same method with same name , argumets 
 and return type with just the body of those methods different and when that method is called using the object type of the child class and the reference  variable 
 of the type of parent class then that child method overrides the content of the parent class's method content .

This is called Method Overriding , Both Method overriding and overloading just applies upon methods only and not on the instance variables.


why it is called Dynamic polymorphism : 

Because , the resolution of the issue that which method should called and with what content should a method should be overrided is resolved at the Runtime instead of the 
compile time by the Java.

Now , How Java knows about  which method to call? 

:

Java resolves the issue of which method to call with a concept known as DYNAMIC METHOD DISPATCH .
                                                                        _______________________

public class Shapes {

@override
void area() {
  sout("I am inside Shapes ");
 }
}

public class Circles extends Shapes {

 void area(){
 sout("Area of circle is pi*r*r");
  } 
}

 Example  : Shapes shape = new Circle();

 Here Shapes is the parent class and Circle is the child class , but they both have a common method named area() with diffrent body .

   Note :  the reference variable depends upon the type of the parent class while , method overriding depends upon the object of the child class.

 : 

Here , when we do this :

shape.area();

then output : Area of circle is pi*r*r

that means the method area of the parent class Shapes is being overriden with the area method of the child class Circle.


which implies the method overriding depends upon the type of the object.



-------------------------------------------------------------------------------------------------------

(i) Final Keyword with Method Ovrloading : 
    ------------------------------------

 If we use final keyword with a method and try to override it then java will show an error


 @Override 

final public class Shapes { 
  void area(){
 sout("I am inside the Shapes")
 }

that implies final methods cannot be overriden .

 --------------------------------------------------------------------------------------------------------

(ii) Static Keyword with Method Overloading : 
     --------------------------------------

 if we are making a method static then we cannot override it  .

 Reason :

  Method overriding depends upon the objects
  Static methods does not depends upon the objects .
  Hence, Static methods cannot be overriden .

 







 

